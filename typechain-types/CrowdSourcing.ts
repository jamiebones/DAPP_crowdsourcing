/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace CrowdSourcing {
  export type DonorsAmountStruct = {
    donorsAddress: string;
    amount: BigNumberish;
  };

  export type DonorsAmountStructOutput = [string, BigNumber] & {
    donorsAddress: string;
    amount: BigNumber;
  };
}

export interface CrowdSourcingInterface extends utils.Interface {
  contractName: "CrowdSourcing";
  functions: {
    "amountDonated()": FunctionFragment;
    "campaignRunning()": FunctionFragment;
    "deployer()": FunctionFragment;
    "donateToCause()": FunctionFragment;
    "donors(address)": FunctionFragment;
    "donorsAddress(uint256)": FunctionFragment;
    "getDonorsList()": FunctionFragment;
    "initialize(string,uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "purpose()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "targetAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrwaDonation()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "amountDonated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignRunning",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "donateToCause",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "donors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "donorsAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDonorsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "purpose", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrwaDonation",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "amountDonated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignRunning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateToCause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donorsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonorsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purpose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrwaDonation",
    data: BytesLike
  ): Result;

  events: {
    "DonationMade(address,uint256,string)": EventFragment;
    "DonationWithdrawn(address,uint256,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DonationMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonationWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DonationMadeEvent = TypedEvent<
  [string, BigNumber, string],
  { donorAddress: string; amount: BigNumber; crowdsource: string }
>;

export type DonationMadeEventFilter = TypedEventFilter<DonationMadeEvent>;

export type DonationWithdrawnEvent = TypedEvent<
  [string, BigNumber, string],
  { receipient: string; amount: BigNumber; crowdsource: string }
>;

export type DonationWithdrawnEventFilter =
  TypedEventFilter<DonationWithdrawnEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CrowdSourcing extends BaseContract {
  contractName: "CrowdSourcing";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdSourcingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amountDonated(overrides?: CallOverrides): Promise<[BigNumber]>;

    campaignRunning(overrides?: CallOverrides): Promise<[boolean]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    donateToCause(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    donors(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    donorsAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDonorsList(
      overrides?: CallOverrides
    ): Promise<[CrowdSourcing.DonorsAmountStructOutput[]]>;

    initialize(
      _purpose: string,
      _targetamount: BigNumberish,
      _deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purpose(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrwaDonation(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  amountDonated(overrides?: CallOverrides): Promise<BigNumber>;

  campaignRunning(overrides?: CallOverrides): Promise<boolean>;

  deployer(overrides?: CallOverrides): Promise<string>;

  donateToCause(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  donors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  donorsAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getDonorsList(
    overrides?: CallOverrides
  ): Promise<CrowdSourcing.DonorsAmountStructOutput[]>;

  initialize(
    _purpose: string,
    _targetamount: BigNumberish,
    _deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purpose(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrwaDonation(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    amountDonated(overrides?: CallOverrides): Promise<BigNumber>;

    campaignRunning(overrides?: CallOverrides): Promise<boolean>;

    deployer(overrides?: CallOverrides): Promise<string>;

    donateToCause(overrides?: CallOverrides): Promise<void>;

    donors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    donorsAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDonorsList(
      overrides?: CallOverrides
    ): Promise<CrowdSourcing.DonorsAmountStructOutput[]>;

    initialize(
      _purpose: string,
      _targetamount: BigNumberish,
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    purpose(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    targetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrwaDonation(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DonationMade(address,uint256,string)"(
      donorAddress?: string | null,
      amount?: null,
      crowdsource?: string | null
    ): DonationMadeEventFilter;
    DonationMade(
      donorAddress?: string | null,
      amount?: null,
      crowdsource?: string | null
    ): DonationMadeEventFilter;

    "DonationWithdrawn(address,uint256,string)"(
      receipient?: string | null,
      amount?: null,
      crowdsource?: string | null
    ): DonationWithdrawnEventFilter;
    DonationWithdrawn(
      receipient?: string | null,
      amount?: null,
      crowdsource?: string | null
    ): DonationWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    amountDonated(overrides?: CallOverrides): Promise<BigNumber>;

    campaignRunning(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    donateToCause(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    donors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    donorsAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDonorsList(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _purpose: string,
      _targetamount: BigNumberish,
      _deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purpose(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrwaDonation(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amountDonated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignRunning(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donateToCause(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    donors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donorsAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDonorsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _purpose: string,
      _targetamount: BigNumberish,
      _deployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purpose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrwaDonation(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
